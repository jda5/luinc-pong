
services:

  backend:
    build:
      dockerfile: ./backend/Dockerfile

    platform: linux/amd64
    image: ghcr.io/jda5/luinc-pong:latest
    container_name: backend
    restart: always
    env_file:
      # Tells Docker Compose to read the .env file in this directory and 
      # inject its contents as environment variables into the container
      - ./backend/src/.env

    extra_hosts:
      # Allows a direct connection from inside a docker container to the local
      # machine on Linux based systems.
      - "host.docker.internal:host-gateway"

    # ports:
    #   - "8080:8080"

    labels:
      # === Traefik Configurations / TLS ===
      - traefik.enable=true
      # Use a unique service name: "api"
      - traefik.http.services.api.loadbalancer.server.port=8080

      # --- HTTP Router ---
      # Use a unique router name: "api-http"
      - traefik.http.routers.api-http.entrypoints=http
      - traefik.http.routers.api-http.rule=Host(`api.${DOMAIN}`)
      # Apply the redirect middleware
      - traefik.http.routers.api-http.middlewares=https-redirect

      # --- HTTPS Router ---
      # Use a unique router name: "api-https"
      - traefik.http.routers.api-https.entrypoints=https
      - traefik.http.routers.api-https.rule=Host(`api.${DOMAIN}`)
      - traefik.http.routers.api-https.tls=true
      - traefik.http.routers.api-https.tls.certresolver=le

      # --- Middlewares (These are shared definitions, which is fine) ---
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.docker.network=traefik-public
      # Note: You can add middlewares to your router like this:
      # - traefik.http.routers.api-https.middlewares=your-middleware-name
      
    networks:
      - traefik-public
      - internal-network

  frontend:
    build:
      dockerfile: ./frontend/Dockerfile
    
    container_name: frontend
    ports:
      - "5173:5173"

    labels:
      # === Traefik Configurations / TLS ===
      - traefik.enable=true
      # Service name "app" is fine, as it's unique to the frontend now.
      - traefik.http.services.app.loadbalancer.server.port=5173
      
      # --- HTTP Router ---
      # Router name "app-http" is fine.
      - traefik.http.routers.app-http.entrypoints=http
      - traefik.http.routers.app-http.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.app-http.middlewares=https-redirect

      # --- HTTPS Router ---
      # Router name "app-https" is fine.
      - traefik.http.routers.app-https.entrypoints=https
      - traefik.http.routers.app-https.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.app-https.tls=true
      - traefik.http.routers.app-https.tls.certresolver=le

      # --- Middlewares ---
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.docker.network=traefik-public

    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publically available with HTTPS
      - traefik-public
      - internal-network

networks:
  traefik-public:
    external: true

  internal-network:
    external: true